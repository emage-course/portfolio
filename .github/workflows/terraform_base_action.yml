name: "Deployment of Infrastructure with Terraform"
on:
  workflow_call:
    inputs:
      stage:
        required: true
        type: string
      iam_role:
        required: true
        type: string
      environment_directory:
        required: true
        type: string
      tf_mode:
        required: false
        type: string
        default: "plan"
      secrets_source:
        required: false
        type: string
        default: ""
      tf_version:
        required: false
        type: string
        default: "1.5.7"
      org_domain_name:
        required: false
        type: string
        default: "techsecom"
      project_name:
        required: false
        type: string
        default: "terraform-remote"
      company:  
        required: false
        type: string
        default: "Techsecom"
      ssh_private_key:
        required: false
        type: string
        default: ""
      ssh_public_key:
        required: false
        type: string
        default: ""
      aws_region:
        required: false
        type: string
        default: "us-east-2"
#### "Generate PIR/IR" ####
      generate_ir:
        required: false
        default: false
        type: boolean
      deployment_time:
        required: true
        type: string
      deployment_status:
        required: true
        type: string
        default: "failure"
      deployment_approver:
        required: false
        type: string
      ir_s3_bucket:
        required: true
        type: string
      code_commit_sha:
        required: true
        type: string
      product_name:
        required: false
        type: string
      deployment_cluster_name:
        required: false
        type: string
      deployment_engineer_name:
        required: false
        type: string
      aws_account_Name:
        required: false
        type: string
      release_tag:
        required: false
        type: string
      release_version:
        required: false
        type: string
      code_git_ref:
        required: false
        type: string

    outputs:
      deployment_time:
        value: ${{jobs.tf.outputs.deployment_time}}
      deployment_status:
        value: ${{jobs.tf.outputs.deployment_status}}
      deployment_approver:
        value: ${{jobs.tf.outputs.deployment_approver}}
      tf_plan_exit_code:
        value: ${{ jobs.tf.outputs.tf_plan_exit_code }}
    

jobs:
  tf:
    name: tf-${{inputs.stage }}-${{ inputs.tf_mode }}
    environment: ${{ inputs.tf_mode == 'apply' || inputs.tf_mode == 'destroy' || inputs.tf_mode == 'destroy-plan' && inputs.stage || 'Dev Engineer Portfolio' }}
    outputs:
      deployment_time: ${{ steps.deploy-outputs.outputs.deployment_time }}
      deployment_date: ${{ steps.deployment-date.outputs.date }}
      deployment_status: ${{ steps.deploy-outputs.outputs.deployment_status }}
      deployment_approver: ${{ steps.deploy-outputs.outputs.deployment_approver }}
      tf_plan_exit_code: ${{ steps.tf-plan.outputs.exitcode }}

    env:
      TF_VAR_stage: ${{ inputs.stage }}
      TF_VAR_commit_sha: ${{ github.sha }}
      TF_VAR_hcp_client_id: ${{ secrets.HCP_CLIENT_ID }}
      TF_VAR_hcp_client_secret: ${{ secrets.HCP_CLIENT_SECRET }}
    #   SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #   SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY }}
      WORKING_DIRECTORY: ${{ inputs.environment_directory }}
    runs-on: ubuntu-latest

    steps:
    - name: checkout repository
      id: checkout
      if: inputs.tf_mode == 'plan' || inputs.tf_mode == 'apply' || inputs.tf_mode == 'destroy' || inputs.tf_mode == 'destroy-plan' || inputs.generate_ir == 'true' || 'Dev Engineer Portfolio'
      uses: actions/checkout@v4

    - name: Calculate Deployment Time
      id: deploy-time
      run: |
        echo "deployment_time=$(date +'%T %Z')" >> $GITHUB_ENV
    
    - name: Get Deployment Date
      id: deployment-date
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV


    # - name: Install SSH key 
    #   env:
    #     SSH_PRIVATE_KEY: ${{ inputs.ssh_private_key || secrets.SSH_PRIVATE_KEY }}
    #     SSH_PUBLIC_KEY: ${{ inputs.ssh_public_key || secrets.SSH_PUBLIC_KEY }}
    #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock 
    #   uses: webfactory/ssh-agent@v0.8.0
    #   with:
    #       ssh-private-key: |
    #             ${{ secrets.SSH_PRIVATE_KEY }}

    # - name: add SSH key
    #   env:
    #     SSH_PRIVATE_KEY: ${{ inputs.ssh_private_key || secrets.SSH_PRIVATE_KEY }}
    #     SSH_PUBLIC_KEY: ${{ inputs.ssh_public_key || secrets.SSH_PUBLIC_KEY }}
    #     SSH_AUTH_SOCK: /tmp/ssh_agent.sock
    #   run: |
    #     mkdir -p ~/.ssh
    #     ssh-agent -a $SSH_AUTH_SOCK > /dev/null
    #     if [[ "$SSH_PRIVATE_KEY" == *"BEGIN OPENSSH PRIVATE KEY"* ]]; then
    #       echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
    #       echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_ed25519.pub
    #       chmod 600 ~/.ssh/id_ed25519
    #       chmod 644 ~/.ssh/id_ed25519.pub
    #     elif [[ "$SSH_PRIVATE_KEY" == *"BEGIN RSA PRIVATE KEY"* ]]; then
    #       echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    #       echo "$SSH_PUBLIC_KEY" > ~/.ssh/id_rsa.pub
    #       chmod 600 ~/.ssh/id_rsa
    #       chmod 644 ~/.ssh/id_rsa.pub
    #     else
    #       echo "Unsupported SSH key type or no SSH keys provided"
    #       exit 1
    #     fi
    #     ssh-keyscan github.com >> ~/.ssh/known_hosts


    - name: install sops
      id: install-sops
      uses: mdgreenwald/mozilla-sops-action@v1.6.0
      with:
        version: 'latest'

    - name: Configure AWS Role
      id: aws-role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws_region }}
        role-to-assume: ${{ inputs.iam_role }}

    - name: AWS CLI v2
      uses: imehedi/actions-awscli-v2@latest
      with:
        args: s3 ls
    - name: Terraform Setup
      id: tf-setup
      uses: hashicorp/setup-terraform@v3
      # with:
      #   terraform_version: ${{ inputs.tf_version }} 

    - name: Check and Change Directory
      id: check-and-change-dir
      if: inputs.tf_mode == 'apply' || inputs.tf_mode == 'plan' || inputs.tf_mode == 'destroy' || inputs.tf_mode == 'destroy-plan'
      shell: bash
      env:
        EXPECTED_DIR: ${{ inputs.environment_directory }}
      run: |
        pwd 
        ls -l 
        ls
        if [[ $(pwd) != /${EXPECTED_DIR} ]]; then
        echo "Changing directory to $EXPECTED_DIR"
        cd $EXPECTED_DIR
        else
        echo "Already in the correct directory: $EXPECTED_DIR"
        fi
        ls -l 
  
    - name: Terraform Format
      id: tf-fmt
      working-directory: ${{ inputs.environment_directory }}
      if: inputs.tf_mode == 'plan' || inputs.tf_mode == 'destroy-plan'
      run: terraform fmt -check || (echo "::error::Terraform Format check failed. Please run terraform format from ${{ github.event.repository.name }}${{ inputs.environment_directory }} locally before commiting your changes" && exit 1)


    - name: Get Artifact
      id: get-plan-artifact
      if: inputs.tf_mode == 'apply' || inputs.tf_mode == 'destroy-plan'
      uses: actions/download-artifact@v4
      with:
        name: '${{ inputs.stage }}-plan-encrypted'
        path: '${{ inputs.environment_directory }}'

    - name: Get Destroy Artifact
      id: get-destroy-plan-artifact
      if: inputs.tf_mode == 'destroy'
      uses: actions/download-artifact@v4
      with:
        name: '${{ inputs.stage }}-destroy-plan-encrypted'
        path: '${{ inputs.environment_directory }}'

    - name: decrypt Plan Artifact
      id: decrypt-plan
      working-directory: ${{ inputs.environment_directory }}
      if: inputs.tf_mode == 'apply'
      run: |
        echo "${{ secrets.TF_AGE_PRIVATE_KEY }}" > age_key.txt
        export SOPS_AGE_KEY_FILE=$(pwd)/age_key.txt
        sops --decrypt ${{ inputs.stage }}-encr.tfplan > ${{ inputs.stage }}.tfplan
      shell: bash

    - name: decrypt Destroy Plan Artifact
      id: decrypt-destroy-plan
      working-directory: ${{ inputs.environment_directory }}
      if: inputs.tf_mode == 'destroy'
      run: |
        echo "${{ secrets.TF_AGE_PRIVATE_KEY }}" > age_key.txt
        export SOPS_AGE_KEY_FILE=$(pwd)/age_key.txt
        sops --decrypt destroy-${{ inputs.stage }}-encr.tfplan > destroy-${{ inputs.stage }}.tfplan
      shell: bash

    # - name: Copy Secrets from AWS Secrets Manager
    #   id: copy-aws-secrets-helm
    #   if: inputs.secrets_source == 'aws'
    #   continue-on-error: true
    #   uses: aws-actions/aws-secretsmanager-get-secrets@v1
    #   with:
    #     secret-ids: |
    #       ${{ github.event.repository.name }}/${{ inputs.stage }}/secrets
    #     parse-json-secrets: true

    - name: Terraform Init
      id: tf-init
      working-directory: ${{ inputs.environment_directory }} 
      run: |
        # echo "machine github.com login x-access-token password ${{ secrets.G_TOKEN }}" > ~/.netrc
        # git config --global url."https://github.com/".insteadOf "git://github.com/"
        # git config --global advice.detachedHead false
        # git config --global url."https://x-access-token:${{ secrets.G_TOKEN }}@github.com/".insteadOf "https://github.com/"
        terraform init

    - name: Terraform Validate
      id: tf-validate
      working-directory: ${{ inputs.environment_directory }}
      if: inputs.tf_mode == 'plan' || inputs.tf_mode == 'destroy-plan' || inputs.tf_mode == 'apply' || inputs.tf_mode == 'destroy'
      run: terraform validate -no-color

    - name: Terraform Plan
      id: tf-plan
      working-directory: ${{ inputs.environment_directory }} 
      if: inputs.tf_mode == 'plan'
      run: |
        terraform plan -no-color -input=false -detailed-exitcode -out=${{ inputs.stage }}.tfplan
        terraform show -no-color ${{ inputs.stage }}.tfplan > plan.out

      shell: bash

    - name: Update Pull Request
      id: update-pr
      if: inputs.tf_mode == 'plan' && github.event_name == 'pull_request'
      uses: actions/github-script@v7

      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('${{ inputs.environment_directory }}/plan.out', 'utf8')
          const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
          const output = `#### Terraform Environment 🖌\`${{ inputs.stage }}\`
          #### Terraform Format and Style 🖌\`${{ steps.tf-fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.tf-init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.tf-validate.outcome }}\`

          <details><summary>Show Validation Output</summary>

          \`\`\`\n
          ${{ steps.tf-validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖\`${{ steps.tf-plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${plan}
          \`\`\`
          
          </details>
          ${truncated_message}

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Destroy Plan
      id: tf-destroy-plan
      working-directory: ${{ inputs.environment_directory }} 
      if: inputs.tf_mode == 'destroy-plan' 
      run: |
        terraform plan -destroy -no-color -input=false -detailed-exitcode -out=destroy-${{ inputs.stage }}.tfplan || PLAN_EXIT=$?
        if [ "$PLAN_EXIT" -eq 2 ]; then
          echo "Destroy plan succeeded with changes to apply."
        elif [ "$PLAN_EXIT" -ne 0 ]; then
          echo "Destroy plan failed with exit code $PLAN_EXIT."
          exit $PLAN_EXIT
        fi
        terraform show -no-color destroy-${{ inputs.stage }}.tfplan > destroy-plan.out

    - name: Update Pull Request on Destroy
      id: update-pr-on-destroy
      if: inputs.tf_mode == 'destroy-plan' && github.event_name == 'pull_request'
      uses: actions/github-script@v7

      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('${{ inputs.environment_directory }}/destroy-plan.out', 'utf8')
          const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""
          const output = `#### Terraform Environment 🖌\`${{ inputs.stage }}\`
          #### Terraform Format and Style 🖌\`${{ steps.tf-fmt.outcome }}\`
          #### Terraform Initialization ⚙️\`${{ steps.tf-init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.tf-validate.outcome }}\`

          <details><summary>Show Validation Output</summary>

          \`\`\`\n
          ${{ steps.tf-validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖\`${{ steps.tf-plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${plan}
          \`\`\`
          
          </details>
          ${truncated_message}

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      id: tf-plan-status
      if: steps.tf-plan.outputs.exitcode == 1 && inputs.tf_mode == 'plan'
      run: |
        echo "::error::Terraform Plan failed. Please review the plan step and make the necessary changes to your Terraform configuration"
        exit 1

    - name: Terraform Destroy Plan Status
      id: tf-destroy-plan-status
      if: steps.tf-destroy-plan.outputs.exitcode == 1 && inputs.tf_mode == 'destroy-plan'
      run: |
        echo "::error::Terraform Plan failed. Please review the plan step and make the necessary changes to your Terraform configuration"
        exit 1

    - name: Encrypt Plan with SOPS
      id: encrypt-plan
      working-directory: ${{ inputs.environment_directory }}
      if: inputs.tf_mode == 'plan'
      run: |
        INPUT_PLAN="${{ inputs.stage }}.tfplan"
        OUTPUT_ENCR_PLAN="${{ inputs.stage }}-encr.tfplan"
        sops --age ${{ secrets.TF_AGE_PUBLIC_KEY }} -e "$INPUT_PLAN" > "$OUTPUT_ENCR_PLAN"
      shell: bash
    
    - name: Encrypt Destroy Plan with SOPS
      id: encrypt-destory-plan
      working-directory: ${{ inputs.environment_directory }}
      if: inputs.tf_mode == 'destroy-plan'
      run: |
        INPUT_PLAN="destroy-${{ inputs.stage }}.tfplan"
        OUTPUT_ENCR_PLAN="destroy-${{ inputs.stage }}-encr.tfplan"
        sops --age ${{ secrets.TF_AGE_PUBLIC_KEY }} -e "$INPUT_PLAN" > "$OUTPUT_ENCR_PLAN"
      shell: bash

    - name: Upload Artifact
      id: upload-plan-artifact
      if: inputs.tf_mode == 'plan' && github.event_name != 'pull_request' || github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: '${{ inputs.stage }}-plan-encrypted'
        path: '${{ inputs.environment_directory }}/${{ inputs.stage }}-encr.tfplan'
        retention-days: 3

    - name: Upload Destroy Artifact
      id: upload-destroy-plan-artifact
      if: inputs.tf_mode == 'destroy-plan' 
      uses: actions/upload-artifact@v4
      with:
        name: '${{ inputs.stage }}-destroy-plan-encrypted'
        path: 'destroy-${{ inputs.stage }}-encr.tfplan'
        retention-days: 3

    # - name: Directory Listing
    #   id: dir-listing
    #   if: inputs.tf_mode == 'plan' || inputs.tf_mode == 'apply'
    #   working-directory: ${{ inputs.environment_directory }}
    #   run: |
    #     ls -la
    #     ls ~/.ssh
    #     cat ~/.ssh/id_ed25519
    #     cat ~/.ssh/id_ed25519.pub
    #     pwd
        

    - name: Terraform Apply
      if: inputs.tf_mode == 'apply' || 'Dev Engineer Portfolio'
      working-directory: ${{ inputs.environment_directory }} 
      id: tf-apply
      run: |
        terraform apply ${{ inputs.stage }}.tfplan 

    - name: Terraform show apply
      if: inputs.tf_mode == 'apply'
      working-directory: ${{ inputs.environment_directory }} 
      id: tf-show-apply
      run: |
        terraform show -no-color > apply.out

    - name: Terraform Destroy
      if: inputs.tf_mode == 'destroy'
      working-directory: ${{ inputs.environment_directory }} 
      id: tf-destroy
      run: |
          terraform apply destroy-${{ inputs.stage }}.tfplan

    - name: Terraform Outputs
      if: inputs.tf_mode == 'apply' && steps.tf-apply.outcome == 'success'
      working-directory: ${{ inputs.environment_directory }} 
      id: tf-outputs
      run: terraform output

    - name: Terraform Outputs Destroy
      if: inputs.tf_mode == 'destroy' && steps.tf-destroy.outcome == 'success'
      working-directory: ${{ inputs.environment_directory }} 
      id: tf-outputs-destroy
      run: terraform output

    - name: Deploy outputs
      id: deploy-outputs
      working-directory: ${{ inputs.environment_directory }} 
      if: inputs.tf_mode == 'apply' && steps.tf-apply.outcome == 'success'
      run: |
        echo "deployment_time=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT
        echo "deployment_status=success" >> $GITHUB_OUTPUT
        echo "deployment_approver=${{ github.event.deployment_status.reviewer.login }}" >> $GITHUB_OUTPUT
        echo $GITHUB_ENV

    - name: Deploy outputs Destroy
      id: deploy-outputs-destroy
      working-directory: ${{ inputs.environment_directory }} 
      if: inputs.tf_mode == 'destroy' && steps.tf-destroy.outcome == 'success'
      run: |
        echo "deployment_time=$(date +'%Y-%m-%dT%H:%M:%S')" >> $GITHUB_OUTPUT
        echo "deployment_status=success" >> $GITHUB_OUTPUT
        echo "deployment_approver=${{ github.event.deployment_status.reviewer.login }}" >> $GITHUB_OUTPUT
        echo $GITHUB_ENV

    - name: Terraform Apply Status
      working-directory: ${{ inputs.environment_directory }} 
      if: inputs.tf_mode == 'apply' && steps.tf-apply.outcome == 'failure'
      id: tf-apply-status
      run: |
        echo "::error::Terraform Apply failed for ${{ inputs.stage }}. Please review the Apply step and make the necessary changes to your Terraform configuration"
        exit 1


    - name: Terraform Destroy Status
      working-directory: ${{ inputs.environment_directory }} 
      if: inputs.tf_mode == 'destroy' && steps.tf-destroy.outcome == 'failure'
      id: tf-destroy-status
      run: |
        echo "::error::Terraform Destroy failed for ${{ inputs.stage }}. Please review the Destroy step and make the necessary changes to your Terraform configuration"
        exit 1

#### "Generate PIR/IR"` #####
    - name: Get Artifact
      id: get-tf-plan-artifact-ir
      if: inputs.generate_ir == true && inputs.tf_mode == 'plan'
      uses: actions/download-artifact@v4
      with:
        name: '${{ inputs.stage }}-plan-encrypted'
        path: '${{ inputs.environment_directory }}'


    - name: decrypt Plan Artifact
      id: decrypt-plan-ir
      working-directory: ${{ inputs.environment_directory }}
      if: inputs.tf_mode == 'apply'
      run: |
        echo "${{ secrets.TF_AGE_PRIVATE_KEY }}" > age_key.txt
        export SOPS_AGE_KEY_FILE=$(pwd)/age_key.txt
        sops --decrypt ${{ inputs.stage }}-encr.tfplan > ${{ inputs.stage }}.tfplan
      shell: bash

    - name: install pdf converter
      id: install-wkhtmltopdf
      if: inputs.generate_ir == true
      shell: bash
      run: |
        sudo apt-get update && sudo apt-get install -y wkhtmltopdf

    - name: Gen
      id: gen-pr
      if: inputs.generate_ir == true && inputs.tf_mode == 'plan'
      working-directory: ${{ inputs.environment_directory }} 
      env:
        TF_PLAN_OUTCOME: ${{ steps.tf-plan.outcome }}
        TF_INIT_OUTCOME: ${{ steps.tf-init.outcome }}
        TF_VALIDATE_STDOUT: ${{ steps.tf-validate.outputs.stdout }}
        GITHUB_ACTOR: ${{ github.actor }}
        PROJECT_NAME: ${{ vars.PROJECT_NAME }}
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      shell: bash
      run: |
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-10)
        CODE_COMMIT_SHA=$(echo ${{ inputs.code_commit_sha }} | cut -c1-10)
        PIR_HTML=./${{ inputs.stage }}-ir.html
        base64 logo.jpg > logo_base64.txt
        LOGO_BASE64=$(cat logo_base64.txt)
        TERRAFORM_PLAN=$(<plan.out)
        ESCAPED_TERRAFORM_PLAN=$(echo "$TERRAFORM_PLAN" | sed -e 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g' | awk '{printf "%s<br>", $0}')
        GIT_REF=$(echo ${{ github.ref }} | cut -c1-10)
        DEPLOYER=$(echo ${{ github.triggering_actor }}| cut -f1 -d"@")
        PROD_VERSION=$(echo ${{ github.ref }} | cut --complement -d "."  -f 1)
        GIT_COMMIT=$(echo ${{ github.sha }})
        
        cat <<EOT >> $PIR_HTML
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
            <meta name="description" content="Medistrano"/>
            <meta name="keywords" content="rubyonrails ruby rails capistrano deployment"/>
            <title>Product Installation Requirements -
        
            </title>
        
            <style>
            body {
            font-family: Arial, sans-serif;
            font-size: 10px;
            }
        
            #logo {
            text-align: right;
            }
        
            h1, h2.center {
            text-align: center;
            }
        
            h2 {
            page-break-before: always;
            }
        
            h2.center {
            page-break-before: auto;
            }
        
            h3 {
            margin-top: 25px;
            margin-bottom: 15px;
            }
        
            /* Table styles */
            table {
            border-width: 1px;
            border-color: #ccc;
            border-collapse: collapse;
            width: 100%;
            page-break-inside: avoid;
            }
        
            th, td {
            border-width: 1px;
            padding: 8px;
            border-style: solid;
            border-color: #ccc;
            }
        
            th {
            background-color: #eee;
            }
        
            td {
            word-break: break-all;
            }
        
            ul {
            padding-left: 15px;
            margin-bottom: 0px;
            }
        
            ul li {
            margin-bottom: 10px;
            }
        
            ul li:last-child {
            margin-bottom: 0px;
            }
        
            ul li span {
            overflow-wrap: break-word;
            word-wrap: break-word;
            }
        
            ul.configuration-list li span:first-child {
            margin-right: 5px;
            }
        
            .expected-result {
            width: 70px;
            }
            </style>
        </head>
        
        <body>
        <div class="header">
        <div id="logo">
            <img src="data:image/jpeg;base64,$LOGO_BASE64" alt="Company Logo">
        </div>
        <h1>Product Installation Requirements</h1>
        
        <h2 class="center">Product Description</h2>
        <table>
            <tr>
            <th>Product Name</th>
            <th>Product Version</th>
            <th>Product URL</th>
            <th>Deployment Approver</th>
            </tr>
            <tr>
            <td>${{ inputs.product_name }}</td>
            <td>${{inputs.release_version}}</td>
            <td>PROD_URL</td>
            <td>${{ github.event.deployment_status.reviewer.login }}</td>
            </tr>
        </table>
        <h2 class="center">Product GHA WorkFlow Description</h2>
        <table>
            <tr>
            <th>Commit SHA</th>
            <th>Code Commit SHA</th>
            <th>Code Git Ref</th>
            <th>Git Ref</th>
            <th>Product code Repository</th>
            <th>Repository</th>
            </tr>
            <tr>
            <td>${{github.sha}}</td>
            <td>${{inputs.code_commit_sha}}</td>
            <td>${{inputs.code_git_ref}}</td>
            <td>${{github.sha}}/td>
            <td>PRODUCT_CODE_URL</td>
            <td>${{ github.event.repository.name }}/td>
            </tr>
        </table>
        
        <h2 class="center">Product Team</h2>
        <table>
            <tr>
            <th>Name</th>
            <th>Role(s)</th>
            <th>Enviroments</th>
            <th>Code Enviroments</th>
            </tr>
            <!-- <% @pir_data[:product_team].each do |team_member| %> -->
                <tr>
                <!-- <td><%= team_member[:name] %></td>
                <td><%= team_member[:roles].join("<br />".html_safe) %></td> -->
                <td>${{ github.triggering_actor }}</td>
                <td>Configuration Engineer</td>
                <td>${{ inputs.stage }}</td>
                <td>${{ inputs.product_name }}</td>
                </tr>
            <!-- <% end %> -->
        </table>
        
        <h2 class="center">Document Revision History</h2>
        <table>
            <tr>
            <th>Version</th>
            <th>Date</th>
            <th>Deployment Time</th>
            <th>Author</th>
            <th>Source</th>
            <th>Description of Changes</th>
            </tr>
        
                <tr>
                <td>${{inputs.release_version}}</td>
                <td>$date</td>
                <td>$deployment_time</td>
                <td>${{ github.actor }}</td>
                <td>Generated by GitHub Action </td>
                <td>Original version</td>
                </tr>
        </table>
        <h2 class="center">Verification Steps</h2>
        <table>
            <tr>
            <th>Step #</th>
            <th>Instructions</th>
            <th colspan="2">Expected Result</th>
            </tr>
                <tr>
                <td>1</td>
                <td>Verify the GHA pipeline succeeded: ${{ inputs.deployment_status }}</p></td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>2</td>
                <td>Verify the GHA pipeline is running with git commit ${{ github.sha }} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>3</td>
                <td>Verify the GHA pipeline was approved by: ${{ inputs.deployment_approver}} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>4</td>
                <td>Verify the GHA pipeline deployment cluster name is: ${{ inputs.deployment_cluster_name }} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>5</td>
                <td>Verify the GHA pipeline was trigger/deploy by: ${{ github.actor }} with ID of: ${{ github.triggering_actor }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>6</td>
                <td>Verify the GHA pipeline deployment AWS account name is: ${{ inputs.aws_account_Name}}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>7</td>
                <td>Verify the GHA pipeline Code Git Ref is: ${{ inputs.code_git_ref }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>8</td>
                <td>Verify the GHA pipeline action is ${{ github.event.action }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>9</td>
                <td>Verify the GHA pipeline action commit sha is: ${{github.sha }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>10</td>
                <td>Verify the GHA pipeline deployment code commit sha is: ${{ inputs.code_commit_sha }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>11</td>
                <td>Verify the GHA pipeline deployment code working directory is: ${{ inputs.environment_directory }} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
        </table>
        <h2 class="center">Deployment Logs</h2>
        <table>
            <tr>
            <th>Logs</th>
            </tr>
                <tr>
                <td><pre>$ESCAPED_TERRAFORM_PLAN</pre></td>
                </tr>
        </table>


    - name: Convert to pdf
      id: convert-to-pdf
      if: inputs.generate_ir == true && inputs.tf_mode == 'plan'
      working-directory: ${{ inputs.environment_directory }}
      shell: bash
      run: |
        printenv
        echo $GITHUB_ENV
        /usr/bin/wkhtmltopdf ./${{ inputs.stage }}-ir.html ./${{ inputs.stage }}-pr.pdf

    - name: Upload IR to S3
      if: inputs.generate_ir == true && inputs.tf_mode == 'plan'
      working-directory: ${{ inputs.environment_directory }}
      id: upload-pr
      run: |
        echo "## PIR for ${{ inputs.stage }}" >> $GITHUB_STEP_SUMMARY
        aws s3 cp ./${{ inputs.stage }}-pr.pdf s3://${{ inputs.ir_s3_bucket }}/${{ github.event.repository.name }}/${{ github.ref_name }}/${{ inputs.stage }}-pr.pdf
        echo "- :page_with_curl: [INSTALLATION REPORT](https://${{ inputs.ir_s3_bucket }}.s3.amazonaws.com/${{ github.event.repository.name }}/${{ github.ref_name }}/${{ inputs.stage }}-pr.pdf)" >> $GITHUB_STEP_SUMMARY

    - name: Encrypt PR with SOPS
      if: inputs.generate_ir == true && inputs.tf_mode == 'plan' && steps.tf-apply.outcome == 'success' 
      working-directory: ${{ inputs.environment_directory }}
      id: encrypt-pr-files
      run: |
        echo "${{ secrets.TF_AGE_PUBLIC_KEY }}" > age_key.txt
        export SOPS_AGE_KEY_FILE=$(pwd)/age_key.txt
        sops --age ${{ secrets.TF_AGE_PUBLIC_KEY }} -e ./${{ inputs.stage }}-pr.pdf > ./${{ inputs.stage }}-enc-pr.pdf
        sops --age ${{ secrets.TF_AGE_PUBLIC_KEY }} -e ./${{ inputs.stage }}-ir.html > ./${{ inputs.stage }}-enc-pr.html 

    - name: Remove IR Files
      if: inputs.generate_ir == true && inputs.tf_mode == 'plan'
      working-directory: ${{ inputs.environment_directory }}
      id: remove-pr-files
      run: |
        rm ./${{ inputs.stage }}-pr.pdf
        rm ./${{ inputs.stage }}-ir.html


    - name: Gen-ir
      id: gen-ir
      if: inputs.generate_ir == true && inputs.tf_mode == 'apply'
      working-directory: ${{ inputs.environment_directory }} 
      env:
        TF_PLAN_OUTCOME: ${{ steps.tf-plan.outcome }}
        TF_INIT_OUTCOME: ${{ steps.tf-init.outcome }}
        TF_VALIDATE_STDOUT: ${{ steps.tf-validate.outputs.stdout }}
        GITHUB_ACTOR: ${{ github.actor }}
        PROJECT_NAME: ${{ vars.PROJECT_NAME }}
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      shell: bash
      run: |
        COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-10)
        CODE_COMMIT_SHA=$(echo ${{ inputs.code_commit_sha }} | cut -c1-10)
        PIR_HTML=./${{ inputs.stage }}-ir.html
        base64 logo.jpg > logo_base64.txt
        LOGO_BASE64=$(cat logo_base64.txt)
        TERRAFORM_PLAN=$(<apply.out)
        ESCAPED_TERRAFORM_PLAN=$(echo "$TERRAFORM_PLAN" | sed -e 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g; s/'"'"'/\&#39;/g' | awk '{printf "%s<br>", $0}')
        GIT_REF=$(echo ${{ github.ref }} | cut -c1-10)
        DEPLOYER=$(echo ${{ github.triggering_actor }}| cut -f1 -d"@")
        PROD_VERSION=$(echo ${{ github.ref }} | cut --complement -d "."  -f 1)
        GIT_COMMIT=$(echo ${{ github.sha }})
        
        cat <<EOT >> $PIR_HTML
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta http-equiv="content-type" content="text/html;charset=UTF-8"/>
            <meta name="description" content="Medistrano"/>
            <meta name="keywords" content="rubyonrails ruby rails capistrano deployment"/>
            <title>Product Installation Requirements -
        
            </title>
        
            <style>
            body {
            font-family: Arial, sans-serif;
            font-size: 10px;
            }
        
            #logo {
            text-align: right;
            }
        
            h1, h2.center {
            text-align: center;
            }
        
            h2 {
            page-break-before: always;
            }
        
            h2.center {
            page-break-before: auto;
            }
        
            h3 {
            margin-top: 25px;
            margin-bottom: 15px;
            }
        
            /* Table styles */
            table {
            border-width: 1px;
            border-color: #ccc;
            border-collapse: collapse;
            width: 100%;
            page-break-inside: avoid;
            }
        
            th, td {
            border-width: 1px;
            padding: 8px;
            border-style: solid;
            border-color: #ccc;
            }
        
            th {
            background-color: #eee;
            }
        
            td {
            word-break: break-all;
            }
        
            ul {
            padding-left: 15px;
            margin-bottom: 0px;
            }
        
            ul li {
            margin-bottom: 10px;
            }
        
            ul li:last-child {
            margin-bottom: 0px;
            }
        
            ul li span {
            overflow-wrap: break-word;
            word-wrap: break-word;
            }
        
            ul.configuration-list li span:first-child {
            margin-right: 5px;
            }
        
            .expected-result {
            width: 70px;
            }
            </style>
        </head>
        
        <body>
        <div class="header">
        <div id="logo">
            <img src="data:image/jpeg;base64,$LOGO_BASE64" alt="Company Logo">
        </div>
        <h1>Product Installation Requirements</h1>
        
        <h2 class="center">Product Description</h2>
        <table>
            <tr>
            <th>Product Name</th>
            <th>Product Version</th>
            <th>Product URL</th>
            <th>Deployment Approver</th>
            </tr>
            <tr>
            <td>${{ inputs.product_name }}</td>
            <td>${{inputs.release_version}}</td>
            <td>PROD_URL</td>
            <td>${{ github.event.deployment_status.reviewer.login }}</td>
            </tr>
        </table>
        <h2 class="center">Product GHA WorkFlow Description</h2>
        <table>
            <tr>
            <th>Commit SHA</th>
            <th>Code Commit SHA</th>
            <th>Code Git Ref</th>
            <th>Git Ref</th>
            <th>Product code Repository</th>
            <th>Repository</th>
            </tr>
            <tr>
            <td>${{github.sha}}</td>
            <td>${{inputs.code_commit_sha}}</td>
            <td>${{inputs.code_git_ref}}</td>
            <td>${{github.sha}}/td>
            <td>PRODUCT_CODE_URL</td>
            <td>${{ github.event.repository.name }}/td>
            </tr>
        </table>
        
        <h2 class="center">Product Team</h2>
        <table>
            <tr>
            <th>Name</th>
            <th>Role(s)</th>
            <th>Enviroments</th>
            <th>Code Enviroments</th>
            </tr>
            <!-- <% @pir_data[:product_team].each do |team_member| %> -->
                <tr>
                <!-- <td><%= team_member[:name] %></td>
                <td><%= team_member[:roles].join("<br />".html_safe) %></td> -->
                <td>${{ github.triggering_actor }}</td>
                <td>Configuration Engineer</td>
                <td>${{ inputs.stage }}</td>
                <td>${{ inputs.product_name }}</td>
                </tr>
            <!-- <% end %> -->
        </table>
        
        <h2 class="center">Document Revision History</h2>
        <table>
            <tr>
            <th>Version</th>
            <th>Date</th>
            <th>Deployment Time</th>
            <th>Author</th>
            <th>Source</th>
            <th>Description of Changes</th>
            </tr>
        
                <tr>
                <td>${{inputs.release_version}}</td>
                <td>$date</td>
                <td>$deployment_time</td>
                <td>${{ github.actor }}</td>
                <td>Generated by GitHub Action </td>
                <td>Original version</td>
                </tr>
        </table>
        <h2 class="center">Verification Steps</h2>
        <table>
            <tr>
            <th>Step #</th>
            <th>Instructions</th>
            <th colspan="2">Expected Result</th>
            </tr>
                <tr>
                <td>1</td>
                <td>Verify the GHA pipeline succeeded: ${{ inputs.deployment_status }}</p></td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>2</td>
                <td>Verify the GHA pipeline is running with git commit ${{ github.sha }} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>3</td>
                <td>Verify the GHA pipeline was approved by: ${{ inputs.deployment_approver}} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>4</td>
                <td>Verify the GHA pipeline deployment cluster name is: ${{ inputs.deployment_cluster_name }} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>5</td>
                <td>Verify the GHA pipeline was trigger/deploy by: ${{ github.actor }} with ID of: ${{ github.triggering_actor }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>6</td>
                <td>Verify the GHA pipeline deployment AWS account name is: ${{ inputs.aws_account_Name}}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>7</td>
                <td>Verify the GHA pipeline Code Git Ref is: ${{ inputs.code_git_ref }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>8</td>
                <td>Verify the GHA pipeline action is ${{ github.event.action }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>9</td>
                <td>Verify the GHA pipeline action commit sha is: ${{github.sha }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>10</td>
                <td>Verify the GHA pipeline deployment code commit sha is: ${{ inputs.code_commit_sha }}</td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
                <tr>
                <td>11</td>
                <td>Verify the GHA pipeline deployment code working directory is: ${{ inputs.environment_directory }} </td>
                <td>Confirmed.<span style="font-family: Arial Unicode MS, Lucida Grande">&#10004;</span></td>
                </tr>
        </table>
        <h2 class="center">Deployment Logs</h2>
        <table>
            <tr>
            <th>Logs</th>
            </tr>
                <tr>
                <td><pre>$ESCAPED_TERRAFORM_PLAN</pre></td>
                </tr>
        </table>


    - name: Convert to pdf
      id: convert--ir-to-pdf
      if: inputs.generate_ir == true && inputs.tf_mode == 'apply'
      working-directory: ${{ inputs.environment_directory }}
      shell: bash
      run: |
        printenv
        echo $GITHUB_ENV
        /usr/bin/wkhtmltopdf ./${{ inputs.stage }}-ir.html ./${{ inputs.stage }}-ir.pdf

    - name: Upload IR to S3
      if: inputs.generate_ir == true && inputs.tf_mode == 'apply'
      working-directory: ${{ inputs.environment_directory }}
      id: upload-ir
      run: |
        echo "## IR for ${{ inputs.stage }}" >> $GITHUB_STEP_SUMMARY
        aws s3 cp ./${{ inputs.stage }}-ir.pdf s3://${{ inputs.ir_s3_bucket }}/${{ github.event.repository.name }}/${{ github.ref_name }}/${{ inputs.stage }}-ir.pdf
        echo "- :page_with_curl: [INSTALLATION REPORT](https://${{ inputs.ir_s3_bucket }}.s3.amazonaws.com/${{ github.event.repository.name }}/${{ github.ref_name }}/${{ inputs.stage }}-ir.pdf)" >> $GITHUB_STEP_SUMMARY

    - name: Encrypt IR with SOPS
      if: inputs.generate_ir == true && inputs.tf_mode == 'apply' && steps.tf-apply.outcome == 'success' 
      working-directory: ${{ inputs.environment_directory }}
      id: encrypt-ir-files
      run: |
        echo "${{ secrets.TF_AGE_PUBLIC_KEY }}" > age_key.txt
        export SOPS_AGE_KEY_FILE=$(pwd)/age_key.txt
        sops --age ${{ secrets.TF_AGE_PUBLIC_KEY }} -e ./${{ inputs.stage }}-ir.pdf > ./${{ inputs.stage }}-enc-ir.pdf
        sops --age ${{ secrets.TF_AGE_PUBLIC_KEY }} -e ./${{ inputs.stage }}-ir.html > ./${{ inputs.stage }}-enc-ir.html 

    - name: Remove IR Files
      if: inputs.generate_ir == true && inputs.tf_mode == 'apply'
      working-directory: ${{ inputs.environment_directory }}
      id: remove-ir-files
      run: |
        rm ./${{ inputs.stage }}-ir.pdf
        rm ./${{ inputs.stage }}-ir.html

##### "Generate PIR/IR"` #####